#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º.
"""
import os
import sys
from pathlib import Path

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    env_content = """# =============================================================================
# üî• Wildfire Prediction API - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
# =============================================================================

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL (—É–¥–∞–ª–µ–Ω–Ω–∞—è)
DATABASE_URL=postgresql://wildfire_user:wildfire_pass@your-server.com:5432/wildfire_db

# Redis (—É–¥–∞–ª–µ–Ω–Ω—ã–π)
REDIS_URL=redis://your-server.com:6379/0

# MLflow (—É–¥–∞–ª–µ–Ω–Ω—ã–π)
MLFLOW_TRACKING_URI=http://your-server.com:5000
MLFLOW_MODEL_NAME=wildfire-prediction
MLFLOW_MODEL_VERSION=latest
MLFLOW_EXPERIMENT_NAME=wildfire-prediction

# MinIO (—É–¥–∞–ª–µ–Ω–Ω—ã–π)
MINIO_ENDPOINT=your-server.com:9000
MINIO_ACCESS_KEY=your-access-key
MINIO_SECRET_KEY=your-secret-key
MINIO_BUCKET=wildfire-data
MINIO_SECURE=true

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_V1_STR=/api/v1
PROJECT_NAME=Wildfire Prediction System
VERSION=1.0.0

# CORS (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à –¥–æ–º–µ–Ω)
CORS_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000", "https://your-domain.com"]

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY=your-super-secret-key-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
"""
    
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        response = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return False
    
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    return True

def test_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º...")
    
    try:
        from app.core.config import settings
        
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        service_status = settings.get_service_status()
        
        for service, config in service_status.items():
            status = "‚úÖ" if config.get("configured") else "‚ùå"
            print(f"  {status} {service}: {config}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...")
    os.system("python migrate.py initial")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    print("‚¨ÜÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    os.system("python migrate.py upgrade")
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

def setup_minio():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO"""
    print("üóÇÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO...")
    
    try:
        from app.services.minio_service import MinIOService
        
        minio = MinIOService()
        result = minio.test_connection()
        
        if result.get("status") == "healthy":
            print("‚úÖ MinIO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if minio.ensure_bucket_exists():
                print("‚úÖ –ë–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MinIO: {result.get('message')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO: {e}")

def setup_mlflow():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow"""
    print("üî¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow...")
    
    try:
        from app.services.mlflow_service import MLflowService
        
        mlflow = MLflowService()
        result = mlflow.test_connection()
        
        if result.get("status") == "healthy":
            print("‚úÖ MLflow –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MLflow: {result.get('message')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MLflow: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• Wildfire Prediction - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("=" * 60)
    
    if len(sys.argv) < 2:
        print("""
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python setup_remote.py <–∫–æ–º–∞–Ω–¥–∞>

–ö–æ–º–∞–Ω–¥—ã:
  env          - –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª
  test         - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  db           - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  minio        - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å MinIO
  mlflow       - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å MLflow
  all          - –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–ü—Ä–∏–º–µ—Ä—ã:
  python setup_remote.py env
  python setup_remote.py test
  python setup_remote.py all
        """)
        return
    
    command = sys.argv[1]
    
    if command == "env":
        create_env_file()
    elif command == "test":
        test_connections()
    elif command == "db":
        setup_database()
    elif command == "minio":
        setup_minio()
    elif command == "mlflow":
        setup_mlflow()
    elif command == "all":
        print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        create_env_file()
        test_connections()
        setup_database()
        setup_minio()
        setup_mlflow()
        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main() 