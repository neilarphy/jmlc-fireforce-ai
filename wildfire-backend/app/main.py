"""
Wildfire Prediction API - Main Application
"""
import warnings
import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log', encoding='utf-8')
    ]
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Pydantic –∏ bcrypt
warnings.filterwarnings("ignore", message="Field.*has conflict with protected namespace.*")
warnings.filterwarnings("ignore", message="Valid config keys have changed in V2.*")
warnings.filterwarnings("ignore", message="error reading bcrypt version.*")

from .routers import data, health
from .routers import predictions
from .core.config import settings
from .core.database import init_db
from .routers import (
    health_router, predictions_router, data_router, auth_router,
    alerts_router, history_router, regions_router, events_router,
    user_router, workers_router, models_router
)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    print("üöÄ Starting Wildfire Prediction API...")
    # await init_db()  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü - –æ–Ω–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
    print("‚úÖ Database connection ready")
    
    yield
    
    # Shutdown
    print("üõë Shutting down Wildfire Prediction API...")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ª–µ—Å–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
    allow_credentials=False,  # –û—Ç–∫–ª—é—á–∞–µ–º credentials –¥–ª—è wildcard origins
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(health.router, prefix=settings.API_V1_STR)
app.include_router(data.router, prefix=settings.API_V1_STR)
app.include_router(predictions.router)
app.include_router(auth_router)  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ API_V1_STR

# –ù–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(alerts_router, prefix=settings.API_V1_STR)
app.include_router(history_router, prefix=settings.API_V1_STR)
app.include_router(regions_router, prefix=settings.API_V1_STR)
app.include_router(events_router, prefix=settings.API_V1_STR)
app.include_router(user_router, prefix=settings.API_V1_STR)
app.include_router(workers_router, prefix=settings.API_V1_STR)
app.include_router(models_router, prefix=settings.API_V1_STR)

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Wildfire Prediction API",
        "version": settings.VERSION,
        "docs": "/docs",
        "health": "/health"
    }

@app.get("/health")
async def health():
    """–ü—Ä–æ—Å—Ç–æ–π health check"""
    return {"status": "healthy", "service": "wildfire-prediction-api"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 