---
description: project design standard
globs:
alwaysApply: false
---
# Принципы проектирования и архитектуры (FastAPI backend)

## Архитектурные стандарты

- Используйте слоистую архитектуру: Presentation, Middleware, Business, Data, Infrastructure.
- Каждый слой отвечает только за свою зону ответственности.
- Зависимости направляются от внешних слоев к внутренним.
- Бизнес-логика не зависит от деталей реализации инфраструктуры.

## Паттерны проектирования

- Вся работа с БД только через Repository слой. Прямые SQL-запросы вне репозиториев запрещены.
- Для каждой модели — отдельный Repository-класс.
- Вся бизнес-логика инкапсулируется в сервисах (Service Pattern).
- Используйте Middleware для кросс-функциональных задач (логирование, аутентификация, CORS, rate limiting).
- Внедрение зависимостей (Dependency Injection) через FastAPI Dependencies.

## Стандарты организации проекта

- Структурируйте проект по слоям: routers, services, repositories, models, schemas, middleware, dependencies, utils, config, core, tests.
- Группируйте связанную функциональность в модули с четким интерфейсом.
- Минимизируйте связанность между модулями.

## API и ответы

- Соблюдайте RESTful-принципы: используйте правильные HTTP-методы и статус-коды.
- Все ответы должны быть в едином формате (success, data, message, timestamp).
- Ошибки возвращайте в стандартизированном виде (success: false, error: {...}, timestamp).

## Middleware

- Обязательные middleware: CORS, Logging, Rate Limiting, Authentication, Request ID.
- Соблюдайте порядок подключения middleware согласно стандарту.
- Логирование должно включать request_id, user_id, ip, user_agent, duration, timestamp и др.

## Безопасность

- Используйте JWT для аутентификации, реализуйте RBAC.
- Все чувствительные данные шифруйте.
- Всегда валидируйте и санитизируйте входные данные.
- Используйте HTTPS.

## Работа с БД

- Проектируйте схему по 3NF, используйте индексы для часто запрашиваемых полей.
- Все изменения схемы — только через миграции, миграции должны быть обратимыми.

## Документирование

- Документируйте API (OpenAPI/Swagger).
- Описывайте архитектурные решения и нестандартные подходы.
- Документируйте сложные алгоритмы и бизнес-логику в коде.

## Мониторинг и метрики

- Внедряйте структурированное логирование.
- Снимайте метрики по времени ответа, ошибкам, throughput и бизнес-показателям.

## Контрольные вопросы

- Нарушает ли код слоистую архитектуру?
- Есть ли прямой доступ к БД вне репозиториев?
- Соблюдается ли единый формат ответов API?
- Документированы ли сложные решения и архитектура?
- Применяются ли обязательные middleware и стандарты безопасности?
