"""Rough centroids for Russian regions for map display.

This is a minimal subset to visualize Rosleshoz bulletins. Coordinates are
approximate and intended only for indicative clustering on the map.
"""
from __future__ import annotations

from typing import Dict, Tuple
import re

# Map of normalized region name -> (lat, lon)
REGION_CENTROIDS: Dict[str, Tuple[float, float]] = {
    # Republics and krais
    "республика саха (якутия)": (62.0, 129.7),
    "саха (якутия)": (62.0, 129.7),
    "якутия": (62.0, 129.7),
    "республика алтай": (50.9, 86.9),
    "республика карелия": (64.5, 34.8),
    "карелия": (64.5, 34.8),
    "республика бурятия": (51.8, 107.6),
    "бурятия": (51.8, 107.6),
    "республика тыва": (51.7, 94.4),
    "тыва": (51.7, 94.4),
    "республика крым": (45.3, 34.0),
    "крым": (45.3, 34.0),
    "запорожская область": (47.5, 35.1),
    "запорожской область": (47.5, 35.1),
    "ямало-ненецкий автономный округ": (66.1, 76.7),
    "ямало-ненецком автономном округе": (66.1, 76.7),
    "ямало-ненецкий ао": (66.1, 76.7),
    "краснодарский край": (45.0, 39.0),
    "забайкальский край": (52.0, 113.5),
    "красноярский край": (61.9, 89.0),
    "камчатский край": (56.1, 160.0),
    "хабаровский край": (50.6, 136.9),
    "ставропольский край": (45.0, 43.2),
    "пермский край": (58.0, 56.3),
    "приморский край": (43.1, 131.9),
    "алтайский край": (52.3, 82.3),
    
    # Oblasts and AO
    "архангельская область": (64.5, 40.5),
    "брянская область": (53.2, 34.4),
    "воронежская область": (51.7, 39.2),
    "ростовская область": (47.3, 40.0),
    "мурманская область": (68.9, 33.0),
    "иркутская область": (56.6, 104.0),
    "иркутской область": (56.6, 104.0),
    "пензенская область": (53.2, 45.0),
    "томская область": (58.7, 82.0),
    "ханты-мансийский автономный округ": (61.0, 69.0),
    "ханты-мансийском ао": (61.0, 69.0),
    "ханты-мансийский ао": (61.0, 69.0),
    "югра": (61.0, 69.0),
    "московская область": (55.5, 37.5),
    "тверская область": (57.0, 36.3),
    "вологодская область": (60.0, 40.7),
    "астраханская область": (46.3, 48.0),
    "волгоградская область": (49.5, 44.5),
    "кировская область": (58.6, 49.6),
    "нижегородская область": (56.3, 44.0),
    "самарская область": (53.2, 50.2),
    "саратовская область": (51.6, 46.0),
    "ульяновская область": (54.3, 48.4),
    "курганская область": (55.5, 65.3),
    "тюменская область": (57.2, 65.5),
    "липецкая область": (52.6, 39.6),
    "рязанская область": (54.6, 39.7),
    "смоленская область": (54.8, 32.0),
    "костромская область": (58.6, 43.0),
    "ленинградская область": (60.0, 30.0),
    "сахалинская область": (49.9, 143.4), 
    "новгородская область": (58.5, 32.9),
    "оренбургская область": (51.8, 55.1),
    "магаданская область": (59.6, 150.8),
    "хабаровский край": (50.6, 136.9),
    
    # Others from bulletin
    "луганская народная республика": (48.6, 39.3),
    "донецкая народная республика": (48.0, 37.8),
    "херсонская область": (46.6, 33.2),
    "республика башкортостан": (54.7, 56.0),
    "башкортостан": (54.7, 56.0),
    "республика коми": (63.6, 54.9),
    "коми": (63.6, 54.9),
    "республика марий эл": (56.6, 48.0),
    "марий эл": (56.6, 48.0),
    "республика мордовия": (54.2, 45.2),
    "мордовия": (54.2, 45.2),
    "удмуртская республика": (57.0, 53.0),
    "удмуртия": (57.0, 53.0),
    "чувашская республика": (55.5, 47.1),
    "чувашия": (55.5, 47.1),
    "республика дагестан": (42.1, 47.5),
    "дагестан": (42.1, 47.5),
    "республика ингушетия": (43.0, 44.8),
    "ингушетия": (43.0, 44.8),
    "карачево-черкесская республика": (44.2, 41.9),
    "карачаево-черкесия": (44.2, 41.9),
    "чеченская республика": (43.3, 45.7),
    "чечня": (43.3, 45.7),
    "республика калмыкия": (46.3, 44.3),
    "калмыкия": (46.3, 44.3),
    "республика адыгея": (44.6, 40.1),
    "адыгея": (44.6, 40.1),
    "республика северная осетия-алания": (43.0, 44.7),
    "северная осетия-алания": (43.0, 44.7),
}


def normalize(name: str) -> str:
    s = name.lower().strip()
    s = s.replace("ё", "е")
    s = s.replace("’", "'")
    # drop any parenthetical notes like (югра)
    s = re.sub(r"\s*\([^)]*\)", "", s)
    s = s.replace(" г.", " ")
    # normalize common case endings
    s = re.sub(r"ской(?!\w)", "ская", s)
    s = re.sub(r"ском(?!\w)", "ский", s)
    # plural -> singular
    s = re.sub(r"\bреспубликах\b", "республика", s)
    s = re.sub(r"\bкраях\b", "край", s)
    s = re.sub(r"\bобластях\b", "область", s)
    s = re.sub(r"\bокругах\b", "округ", s)
    s = re.sub(r"\bавтономном округе\b", "автономный округ", s)
    s = re.sub(r"\bнародной республике\b", "народная республика", s)
    s = re_sub(r"\s+", " ", s)
    return s


def re_sub(pattern: str, repl: str, s: str) -> str:
    import re
    return re.sub(pattern, repl, s)


def regions_to_points(regions: list[str]) -> list[dict]:
    points = []
    for r in regions:
        base = normalize(r)
        # heuristics for NR entities missing the word 'республика'
        if "луган" in base and "народн" in base and "республика" not in base:
            base = "луганская народная республика"
        if "донец" in base and "народн" in base and "республика" not in base:
            base = "донецкая народная республика"
        candidates = [base]
        # If no noun specified, try appending likely nouns
        if ("край" not in base) and ("область" not in base) and ("республика" not in base) and ("ао" not in base):
            if base.endswith("ский"):
                candidates.append(f"{base} край")
            if base.endswith("ская"):
                candidates.append(f"{base} область")
            # bare names like "крым", "якутия"
            candidates.append(f"республика {base}")

        # also consider removing trailing generic words
        tried = set()
        matched = False
        for c in candidates:
            ck = c.strip()
            if ck in tried:
                continue
            tried.add(ck)
            if ck in REGION_CENTROIDS:
                lat, lon = REGION_CENTROIDS[ck]
                points.append({"name": r, "latitude": lat, "longitude": lon})
                matched = True
                break
        if not matched:
            # last chance: if contains spaces, take last token + noun guesses
            last_token = base.split()[-1]
            for guess in (last_token, f"{last_token} край", f"{last_token} область", f"республика {last_token}"):
                gk = guess.strip()
                if gk in REGION_CENTROIDS:
                    lat, lon = REGION_CENTROIDS[gk]
                    points.append({"name": r, "latitude": lat, "longitude": lon})
                    break
    return points


